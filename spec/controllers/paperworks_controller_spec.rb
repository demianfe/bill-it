# -*- encoding : utf-8 -*-
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PaperworksController do

  # This should return the minimal set of attributes required to create a valid
  # Paperwork. As you add validations to Paperwork, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "session" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PaperworksController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index", broken: true do
    it "assigns all paperworks as @paperworks" do
      paperwork = Paperwork.create! valid_attributes
      get :index, {}, valid_session
      assigns(:paperworks).should eq([paperwork])
    end
  end

  describe "GET show", broken: true do
    it "assigns the requested paperwork as @paperwork" do
      paperwork = Paperwork.create! valid_attributes
      get :show, {:id => paperwork.to_param}, valid_session
      assigns(:paperwork).should eq(paperwork)
    end
  end

  describe "GET new", broken: true do
    it "assigns a new paperwork as @paperwork" do
      get :new, {}, valid_session
      assigns(:paperwork).should be_a_new(Paperwork)
    end
  end

  describe "GET edit", broken: true do
    it "assigns the requested paperwork as @paperwork" do
      paperwork = Paperwork.create! valid_attributes
      get :edit, {:id => paperwork.to_param}, valid_session
      assigns(:paperwork).should eq(paperwork)
    end
  end

  describe "GET search" do

    before(:each) do
      @paperwork1 = FactoryGirl.build(:paperwork1)
      @paperwork2 = FactoryGirl.build(:paperwork2)
      @bill = FactoryGirl.create(:bill1)
      @bill.paperworks = [@paperwork1, @paperwork2]
      @bill.save
      @paperwork1.save
      @paperwork2.save
      Sunspot.remove_all(Paperwork)
      Sunspot.index!(Paperwork.all)
    end

    it "searches over a date range" do
      get :search, date_min: "2012-01-01T00:00:00Z", date_max: "2013-06-06T00:00:00Z", format: :json
      assigns(:paperworks).should eq([@paperwork2])
    end

    context "doing a simple 'q' query" do
      context "with a single result" do
        it "assigns query results to @paperworks" do
          get :search, q: "Ingreso de proyecto", format: :json
          assigns(:paperworks).should eq([@paperwork1])
        end
      end

      context "with multiple results" do
        it "assigns multiple query results to @paperworks" do
          get :search, q: "trÃ¡mite", format: :json
          assigns(:paperworks).should eq([@paperwork1, @paperwork2])
        end

        it "paginates results", broken: true do
          get :search, q: "", per_page: '1', page: '1', format: :json
          assigns(:bills).should eq([@paperwork1])
          get :search, q: "", per_page: '1', page: '2', format: :json
          assigns(:bills).should eq([@paperwork2])
        end
      end
    end
  end

  describe "POST create", broken: true do
    describe "with valid params" do
      it "creates a new Paperwork" do
        expect {
          post :create, {:paperwork => valid_attributes}, valid_session
        }.to change(Paperwork, :count).by(1)
      end

      it "assigns a newly created paperwork as @paperwork" do
        post :create, {:paperwork => valid_attributes}, valid_session
        assigns(:paperwork).should be_a(Paperwork)
        assigns(:paperwork).should be_persisted
      end

      it "redirects to the created paperwork" do
        post :create, {:paperwork => valid_attributes}, valid_session
        response.should redirect_to(Paperwork.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved paperwork as @paperwork" do
        # Trigger the behavior that occurs when invalid params are submitted
        Paperwork.any_instance.stub(:save).and_return(false)
        post :create, {:paperwork => { "session" => "invalid value" }}, valid_session
        assigns(:paperwork).should be_a_new(Paperwork)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Paperwork.any_instance.stub(:save).and_return(false)
        post :create, {:paperwork => { "session" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update", broken: true do
    describe "with valid params" do
      it "updates the requested paperwork" do
        paperwork = Paperwork.create! valid_attributes
        # Assuming there are no other paperworks in the database, this
        # specifies that the Paperwork created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Paperwork.any_instance.should_receive(:update_attributes).with({ "session" => "MyString" })
        put :update, {:id => paperwork.to_param, :paperwork => { "session" => "MyString" }}, valid_session
      end

      it "assigns the requested paperwork as @paperwork" do
        paperwork = Paperwork.create! valid_attributes
        put :update, {:id => paperwork.to_param, :paperwork => valid_attributes}, valid_session
        assigns(:paperwork).should eq(paperwork)
      end

      it "redirects to the paperwork" do
        paperwork = Paperwork.create! valid_attributes
        put :update, {:id => paperwork.to_param, :paperwork => valid_attributes}, valid_session
        response.should redirect_to(paperwork)
      end
    end

    describe "with invalid params" do
      it "assigns the paperwork as @paperwork" do
        paperwork = Paperwork.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Paperwork.any_instance.stub(:save).and_return(false)
        put :update, {:id => paperwork.to_param, :paperwork => { "session" => "invalid value" }}, valid_session
        assigns(:paperwork).should eq(paperwork)
      end

      it "re-renders the 'edit' template" do
        paperwork = Paperwork.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Paperwork.any_instance.stub(:save).and_return(false)
        put :update, {:id => paperwork.to_param, :paperwork => { "session" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy", broken: true do
    it "destroys the requested paperwork" do
      paperwork = Paperwork.create! valid_attributes
      expect {
        delete :destroy, {:id => paperwork.to_param}, valid_session
      }.to change(Paperwork, :count).by(-1)
    end

    it "redirects to the paperworks list" do
      paperwork = Paperwork.create! valid_attributes
      delete :destroy, {:id => paperwork.to_param}, valid_session
      response.should redirect_to(paperworks_url)
    end
  end

end
